# -*- coding: utf-8 -*-
"""Simulated_Annealing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o9jM3wgIoC7RqFyHYWxT-bqvNvFo1y9z
"""

import math
import random


def init():
    a = [2, 1, 5, 0, 8, 4, 10, 0, 20, 10]
    return a


def calc_cost(state):
    cost = 0
    for i in range(len(state)):
        for j in range(i, len(state) - 1):
            if state[i] > state[j + 1]:
                cost = cost + 1
    return cost


def State_generation2(current_state, current_state_cost):
    for i in range(len(current_state)):
        for j in range(i + 1, len(current_state)):
            current_state[i], current_state[j] = current_state[j], current_state[i]
            latest_cost = calc_cost(current_state)
            if latest_cost > current_state_cost:
                return State_generation2(current_state, latest_cost)
            elif latest_cost == current_state_cost:
                DE = -1
                ePowDE = math.exp(DE)
                random_number_generate = random.uniform(0, 1)
                if random_number_generate <= ePowDE:
                    return State_generation2(current_state, latest_cost)
            elif latest_cost < current_state_cost:
                DE = latest_cost - current_state_cost
                ePowDE = math.exp(DE)
                random_number_generate = random.uniform(0, 1)
                if random_number_generate <= ePowDE:
                    return State_generation2(current_state, latest_cost)
    return current_state, None


def goal_test(state):
    if calc_cost(state) == 0:
        return True
    else:
        return False


def main():
    state = init()
    cost = calc_cost(state)
    while goal_test(state) != 1:
        state, cost = State_generation2(state, cost)
        if cost is None:
            print(state)
            return
    print(state)
    return


main()